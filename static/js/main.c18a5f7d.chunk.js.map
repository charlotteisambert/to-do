{"version":3,"sources":["app/AppStyle.tsx","app/AddTaskStyle.tsx","app/constants.tsx","app/AddTask.tsx","app/Tasks/TaskStyle.tsx","app/Tasks/Task.tsx","app/Tasks/Number.tsx","app/Tasks/Text.tsx","app/Tasks/TextMultiline.tsx","app/ToDoListStyle.tsx","app/ToDoList.tsx","app/App.tsx","serviceWorker.ts","theme.tsx","index.tsx"],"names":["AppStyle","makeStyles","wrapperApp","padding","wrapperTitle","paddingBottom","title","textTransform","AddTaskStyle","theme","wrapperAddTAsk","background","palette","primary","light","border","main","borderRadius","wrapperDescription","wrapperType","paddingLeft","wrapperError","TASK_TYPES","TEXT","MULTILINE","NUMBER","TASK_TYPES_NAMES","AddTask","handleTaskAdd","useState","description","setDescription","type","setType","error","setError","classes","generateId","Date","valueOf","toString","Grid","container","item","sm","className","Typography","variant","color","TextField","value","onChange","event","currentTarget","multiline","rows","inputProps","maxLength","renderInput","alignItems","FormControl","NativeSelect","name","justify","Button","size","onClick","id","checked","TaskStyle","wrapperTask","backgroundColor","minHeight","wordBreak","delete","cursor","transform","notChecked","Text","onDeletion","onCheck","taskType","pin","style","fontSize","Number","Task","TextMultiline","ToDoListStyle","wrapperTasks","ToDoList","tasks","setTasks","handleDeletion","newTasks","filter","task","handleCheck","map","newTask","key","renderTask","App","align","Boolean","window","location","hostname","match","createMuiTheme","text","secondary","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c18a5f7d.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\n\nconst AppStyle = makeStyles(() => ({\n  wrapperApp: {\n    padding: \"2rem\",\n  },\n  wrapperTitle: {\n    paddingBottom: \"2rem\",\n  },\n  title: {\n    textTransform: \"uppercase\",\n  },\n}));\n\nexport default AppStyle;\n","import { makeStyles, Theme } from \"@material-ui/core\";\n\nconst AddTaskStyle = makeStyles((theme: Theme) => ({\n  wrapperAddTAsk: {\n    background: theme.palette.primary.light,\n    border: `2px solid ${theme.palette.primary.main}`,\n    padding: \"1rem\",\n    borderRadius: \"1rem\",\n  },\n  wrapperDescription: {\n    padding: \"1rem 0 1rem .5rem\",\n  },\n  wrapperType: {\n    paddingLeft: \"2rem\",\n  },\n  wrapperError: {\n    padding: \"1rem 1rem 0 1rem\",\n  },\n}));\n\nexport default AddTaskStyle;\n","\nexport const TASK_TYPES = {\n  TEXT: \"text\",\n  MULTILINE: \"multiline\",\n  NUMBER: \"number\",\n};\n\nexport const TASK_TYPES_NAMES = {\n  TEXT: \"Text\",\n  MULTILINE: \"Big text\",\n  NUMBER: \"Number\",\n};\n","import React, { useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport AddTaskStyle from \"./AddTaskStyle\";\nimport { TaskInterface } from \"./Tasks/TaskInterfaces\";\nimport { TASK_TYPES, TASK_TYPES_NAMES } from \"./constants\";\n\ninterface AddTaskrops {\n  handleTaskAdd: (task: TaskInterface) => void\n}\n\nfunction AddTask({\n  handleTaskAdd,\n}: AddTaskrops): React.ReactElement {\n  const [description, setDescription] = useState<string>(\"\");\n  const [type, setType] = useState<string>(\"text\");\n  const [error, setError] = useState<string | null>();\n  const classes = AddTaskStyle();\n\n  function handleTaskTypeChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    setType(event.currentTarget.value);\n    setDescription(\"\");\n  }\n\n  function onTaskAdd() {\n    if (!description) {\n      setError(\"Add a description to your to-do\");\n      return;\n    }\n    handleTaskAdd({\n      description,\n      id: generateId(),\n      type,\n      checked: false,\n    });\n    setDescription(\"\");\n    if (error) {\n      setError(null);\n    }\n  }\n\n  function generateId(): string {\n    const key = new Date().valueOf();\n    return key.toString();\n  }\n\n  function renderInput(type: string) {\n    switch (type) {\n    case TASK_TYPES.NUMBER:\n      return (\n        <TextField\n          type={type}\n          value={description}\n          onChange={(event) => setDescription(event.currentTarget.value)}\n          error={!!error}\n        />\n      );\n    case TASK_TYPES.MULTILINE:\n      return (\n        <TextField\n          type={type}\n          value={description}\n          onChange={(event) => setDescription(event.currentTarget.value)}\n          error={!!error}\n          multiline\n          rows=\"4\"\n          inputProps={{ maxLength: 200 }}\n        />\n      );\n    case TASK_TYPES.TEXT:\n    default:\n      return (\n        <TextField\n          type={type}\n          value={description}\n          onChange={(event) => setDescription(event.currentTarget.value)}\n          error={!!error}\n          inputProps={{ maxLength: 40 }}\n        />\n      );\n    }\n  }\n\n  return (\n    <Grid container item sm={12} className={classes.wrapperAddTAsk}>\n      <Grid container item sm={12}>\n        <Typography variant=\"h5\" color=\"textPrimary\">Add a to-do: </Typography>\n      </Grid>\n      <Grid container item sm={12} className={classes.wrapperDescription}>\n        <Grid container item sm={3}>\n          <Typography variant=\"body1\" color=\"textPrimary\">Description: </Typography>\n        </Grid>\n        <Grid container item sm={8}>\n          {renderInput(type)}\n        </Grid>\n      </Grid>\n      <Grid container item sm={12} className={classes.wrapperType} alignItems=\"center\">\n        <Grid container item sm={3}>\n          <Typography variant=\"body1\" color=\"textPrimary\">Type: </Typography>\n        </Grid>\n        <Grid container item sm={4}>\n          <FormControl color=\"primary\">\n            <NativeSelect\n              value={type}\n              onChange={handleTaskTypeChange}\n              name=\"type\"\n            >\n              <option value={TASK_TYPES.TEXT}>\n                {\" \"}\n                {TASK_TYPES_NAMES.TEXT}\n                {\" \"}\n              </option>\n              <option value={TASK_TYPES.MULTILINE}>\n                {\" \"}\n                {TASK_TYPES_NAMES.MULTILINE}\n                {\" \"}\n              </option>\n              <option value={TASK_TYPES.NUMBER}>\n                {\" \"}\n                {TASK_TYPES_NAMES.NUMBER}\n                {\" \"}\n              </option>\n            </NativeSelect>\n          </FormControl>\n        </Grid>\n      </Grid>\n      <Grid container item sm={12} justify=\"center\" alignItems=\"center\" className={classes.wrapperError}>\n        <Grid container item sm={10} justify=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" color=\"error\">\n            {error}\n          </Typography>\n        </Grid>\n        <Grid container item sm={2} justify=\"flex-end\">\n          <Button variant=\"outlined\" size=\"medium\" color=\"primary\" onClick={onTaskAdd}>\n            Add\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n\n\n  );\n}\n\nexport default AddTask;\n","import { makeStyles, Theme } from \"@material-ui/core\";\n\nconst TaskStyle = makeStyles((theme: Theme) => ({\n  wrapperTask: {\n    border: `2px solid ${theme.palette.primary.main}`,\n    backgroundColor: \"#f9fbfd\",\n    borderRadius: \"1rem\",\n    minHeight: \"7rem\",\n    \"&:hover\": {\n      backgroundColor: theme.palette.primary.light,\n    },\n  },\n  description: {\n    wordBreak: \"break-word\",\n  },\n  wrapperType: {\n    padding: \"1rem 0\",\n  },\n  delete: {\n    cursor: \"pointer\",\n    padding: \".6rem\",\n    \"&:hover\": {\n      transform: \"scale(1.2)\",\n    },\n  },\n  checked: {\n    cursor: \"pointer\",\n    color: theme.palette.primary.main,\n    \"&:hover\": {\n      transform: \"scale(1.2)\",\n    },\n  },\n  notChecked: {\n    cursor: \"pointer\",\n    color: \"#B5B1B1\",\n    \"&:hover\": {\n      transform: \"scale(1.2)\",\n    },\n  },\n}));\n\nexport default TaskStyle;\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DeleteOutlineOutlinedIcon from \"@material-ui/icons/DeleteOutlineOutlined\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport style from \"./TaskStyle\";\n\nexport interface TaskProps {\n    description: string;\n    onDeletion: () => void;\n    checked: boolean;\n    onCheck: () => void;\n    taskType: string;\n    pin: React.ReactElement;\n}\n\nfunction Text({\n  description,\n  onDeletion,\n  checked,\n  onCheck,\n  taskType,\n  pin,\n}: TaskProps): React.ReactElement {\n  const classes = style();\n  return (\n    <Grid container item sm={12} className={classes.wrapperTask}>\n      <Grid container item sm={12} justify=\"space-between\">\n        <Grid container item sm={1} justify=\"center\" alignItems=\"center\">\n          {pin}\n        </Grid>\n        <Grid container item sm={1} justify=\"center\" alignItems=\"center\">\n          <DeleteOutlineOutlinedIcon color=\"error\" fontSize=\"small\" onClick={onDeletion} className={classes.delete} />\n        </Grid>\n      </Grid>\n      <Grid container item sm={12}>\n        <Grid container item sm={2} alignItems=\"center\" justify=\"center\">\n          <CheckCircleOutlineIcon fontSize=\"large\" onClick={onCheck} className={checked ? classes.checked : classes.notChecked} />\n        </Grid>\n        <Grid container item sm={8}>\n          <Typography variant=\"h5\" color=\"textPrimary\" className={classes.description}>{description}</Typography>\n        </Grid>\n      </Grid>\n      <Grid container item sm={12} justify=\"center\">\n        <Grid container item sm={8} className={classes.wrapperType}>\n          <Typography variant=\"body2\" color=\"textPrimary\">\n            Type:\n            {taskType}\n          </Typography>\n        </Grid>\n      </Grid>\n\n    </Grid>\n  );\n}\n\nexport default Text;\n","import React from \"react\";\nimport StopRoundedIcon from \"@material-ui/icons/StopRounded\";\nimport { TaskProps } from \"./TaskInterfaces\";\nimport Task from \"./Task\";\nimport { TASK_TYPES_NAMES } from \"../constants\";\n\nconst style = {\n  color: \"#bd3e5e\",\n};\n\nfunction Number({\n  description,\n  onDeletion,\n  checked,\n  onCheck,\n}: TaskProps): React.ReactElement {\n  return (\n    <Task\n      description={`Your number is : ${description}`}\n      onDeletion={onDeletion}\n      checked={checked}\n      onCheck={onCheck}\n      taskType={TASK_TYPES_NAMES.NUMBER}\n      pin={\n        <StopRoundedIcon style={style} />\n      }\n    />\n  );\n}\n\nexport default Number;\n","import React from \"react\";\nimport StarRoundedIcon from \"@material-ui/icons/StarRounded\";\nimport { TaskProps } from \"./TaskInterfaces\";\nimport Task from \"./Task\";\nimport { TASK_TYPES_NAMES } from \"../constants\";\n\nconst style = {\n  color: \"#ffe807\",\n};\n\nfunction Text({\n  description,\n  onDeletion,\n  checked,\n  onCheck,\n}: TaskProps): React.ReactElement {\n  return (\n    <Task\n      description={description}\n      onDeletion={onDeletion}\n      checked={checked}\n      onCheck={onCheck}\n      taskType={TASK_TYPES_NAMES.TEXT}\n      pin={\n        <StarRoundedIcon style={style} />\n      }\n    />\n  );\n}\n\nexport default Text;\n","import React from \"react\";\nimport FiberManualRecordRoundedIcon from \"@material-ui/icons/FiberManualRecordRounded\";\nimport { TaskProps } from \"./TaskInterfaces\";\nimport Task from \"./Task\";\nimport { TASK_TYPES_NAMES } from \"../constants\";\n\nconst style = {\n  color: \"#7b188d\",\n};\n\nfunction TextMultiline({\n  description,\n  onDeletion,\n  checked,\n  onCheck,\n}: TaskProps): React.ReactElement {\n  return (\n    <Task\n      description={description}\n      onDeletion={onDeletion}\n      checked={checked}\n      onCheck={onCheck}\n      taskType={TASK_TYPES_NAMES.MULTILINE}\n      pin={\n        <FiberManualRecordRoundedIcon style={style} />\n      }\n    />\n  );\n}\n\nexport default TextMultiline;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst ToDoListStyle = makeStyles(() => ({\n  wrapperTasks: {\n    padding: \"1rem 0rem\",\n  },\n  wrapperTask: {\n    paddingBottom: \"1rem\",\n  },\n}));\n\nexport default ToDoListStyle;\n","import React, { useState } from \"react\";\nimport {\n  Grid,\n} from \"@material-ui/core\";\nimport AddTask from \"./AddTask\";\nimport Number from \"./Tasks/Number\";\nimport Text from \"./Tasks/Text\";\nimport TextMultiline from \"./Tasks/TextMultiline\";\nimport { TaskInterface } from \"./Tasks/TaskInterfaces\";\nimport ToDoListStyle from \"./ToDoListStyle\";\nimport { TASK_TYPES } from \"./constants\";\n\nfunction ToDoList(): React.ReactElement {\n  const classes = ToDoListStyle();\n  const [tasks, setTasks] = useState<TaskInterface[]>([]);\n\n  function renderTask(task: TaskInterface) {\n    switch (task.type) {\n    case TASK_TYPES.NUMBER:\n      return (\n        <Number\n          description={task.description}\n          onDeletion={() => handleDeletion(task.id)}\n          checked={task.checked}\n          onCheck={() => handleCheck(task.id)}\n        />\n      );\n    case TASK_TYPES.MULTILINE:\n      return (\n        <TextMultiline\n          description={task.description}\n          onDeletion={() => handleDeletion(task.id)}\n          checked={task.checked}\n          onCheck={() => handleCheck(task.id)}\n        />\n      );\n    case TASK_TYPES.TEXT:\n    default:\n      return (\n        <Text\n          description={task.description}\n          onDeletion={() => handleDeletion(task.id)}\n          checked={task.checked}\n          onCheck={() => handleCheck(task.id)}\n        />\n      );\n    }\n  }\n\n  function handleTaskAdd(newTask: TaskInterface): void {\n    const newTasks: TaskInterface[] = [...tasks, newTask];\n    setTasks(newTasks);\n  }\n  function handleDeletion(id: string): void {\n    const newTasks = tasks.filter((task) => task.id !== id);\n    setTasks(newTasks);\n  }\n\n  function handleCheck(id: string): void {\n    const newTasks = tasks.map((task) => {\n      if (task.id === id) {\n        return ({\n          ...task,\n          checked: !task.checked,\n        });\n      }\n      return task;\n    });\n    setTasks(newTasks);\n  }\n\n  return (\n    <Grid container>\n      <Grid container item sm={12}>\n        <AddTask handleTaskAdd={handleTaskAdd} />\n      </Grid>\n      <Grid container item sm={12} justify=\"center\" className={classes.wrapperTasks}>\n        {tasks.map((task) => (\n          <Grid container item sm={12} key={task.id} className={classes.wrapperTask}>\n            {renderTask(task)}\n          </Grid>\n        ))}\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default ToDoList;\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppStyle from \"./AppStyle\";\nimport ToDoList from \"./ToDoList\";\n\nfunction App(): React.ReactElement {\n  const classes = AppStyle();\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid container item sm={4} className={classes.wrapperApp}>\n        <Grid item sm={12} className={classes.wrapperTitle}>\n          <Typography variant=\"h3\" color=\"textPrimary\" align=\"center\" className={classes.title}>To-do list</Typography>\n        </Grid>\n        <Grid item container sm={12}>\n          <ToDoList />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { blueGrey } from '@material-ui/core/colors';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#DBE9F5\",\n      main: \"#223958\",\n    },\n    text: {\n      primary: \"#223958\",\n      secondary: \"#DBE9F5\",\n    }\n  },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { theme } from './theme';\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <App />\n    </ThemeProvider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}